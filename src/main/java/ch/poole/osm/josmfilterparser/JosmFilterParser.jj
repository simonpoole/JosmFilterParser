/**
 * Parser for JOSM filter expressions
 *
 * @author Simon Poole
 *
 * Copyright (c) 2019, 2020 Simon Poole
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies
 * or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 " OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

options
{
  JDK_VERSION = "1.8";

  static = false;

  LOOKAHEAD= 5;
  IGNORE_CASE = true;
  FORCE_LA_CHECK = true;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 2;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(JosmFilterParser)
package ch.poole.osm.josmfilterparser;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.io.ByteArrayInputStream;
import java.util.Locale;
import java.util.Stack;

public class JosmFilterParser
{
  Stack < Boolean > startParen = new Stack < Boolean > ();

  boolean regexp = false;

  public Condition condition() throws ParseException {
    return condition0(false);
  }

  public Condition condition(boolean regexp) throws ParseException {
    return condition0(regexp);
  }

  void unsupported(String thing) throws ParseException
  {
    ParseException pex = new ParseException("\"" + thing + "\" is unsupported " + token.next.beginLine + ", column " + token.next.beginColumn);
    pex.currentToken = token;
    throw pex;
  }
  
  Condition not(Token notToken, Condition condition)
  {
    return notToken == null ? condition : new Not(condition);
  }
}

PARSER_END(JosmFilterParser)

TOKEN_MGR_DECLS :
{
  int bracketNestingDepth;
  Stack < Integer > state = new Stack < Integer > ();
}

< DEFAULT, FRAGMENT_STRING_STATE >
TOKEN :
{
  < QUOTE : "\"" >
  {
    state.push(curLexState);
  }
  : QUOTED_STRING_STATE // save current state
}

< QUOTED_STRING_STATE >
TOKEN :
{
  < ENDQUOTE : < QUOTE > >
  {
    SwitchTo(state.pop());
  } // need to switch to prev state 
| < QUOTED_STRING_CHAR : ~[ "\"", "\\" ] >
}

< DEFAULT, FRAGMENT_STRING_STATE >
TOKEN :
{
  < WS : [ " ", "\t" ] > : DEFAULT
}

< DEFAULT >
TOKEN :
{
  < AND : "AND" >
| < OR : "OR" >
| < MINUS : "-" >
}

< DEFAULT >
TOKEN :
{ 
  < TYPE : "type:" > : FRAGMENT_STRING_STATE
| < PRESET : "preset:" > : FRAGMENT_STRING_STATE
| < NODES : "nodes:" > : FRAGMENT_STRING_STATE
| < WAYS : "ways:" > : FRAGMENT_STRING_STATE
| < TAGS : "tags:" > : FRAGMENT_STRING_STATE
| < MEMBERS : "members:" > : FRAGMENT_STRING_STATE
| < ROLE : "role:" > : FRAGMENT_STRING_STATE
| < AREASIZE : "areasize:" > : FRAGMENT_STRING_STATE
| < WAYLENGTH : "waylength:" > : FRAGMENT_STRING_STATE
| < USER : "user:" > : FRAGMENT_STRING_STATE
| < ID : "id:" > : FRAGMENT_STRING_STATE
| < VERSION : "version:" > : FRAGMENT_STRING_STATE
| < CHANGESET : "changeset:" > : FRAGMENT_STRING_STATE
| < TIMESTAMP : "timestamp:" > : FRAGMENT_STRING_STATE
| < HASROLE : "hasRole:" > : FRAGMENT_STRING_STATE
| < NTH : "nth:" > : FRAGMENT_STRING_STATE
| < NTHPERCENT : "nth%:" > : FRAGMENT_STRING_STATE
}

< FRAGMENT_STRING_STATE >
TOKEN:
{
  < NODE : "node" >
| < WAY : "way" >
| < RELATION : "relation" >
| < FRAGMENT_LITERAL : (~[ "\"", "\\", "|", " ", "\t", "<", "=", ">", "~", "(", ")" ])+ > 
}

< DEFAULT >
TOKEN :
{ 
  < CLOSED : "closed" >
| < UNTAGGED : "untagged" >
| < NEW : "new" >
| < MODIFIED : "modified" > 
| < DELETED : "deleted" > 
| < SELECTED : "selected" > 
| < INCOMPLETE : "incomplete" >
| < INVIEW : "inview" >
| < ALLINVIEW : "allinview" >
| < INDOWNLOADEDAREA : "indownloadedarea" >
| < ALLINDOWNLOADEDAREA : "allindownloadedarea" >
| < CHILD : "child" >
| < PARENT : "parent" >
| < LITERAL : (~[ "-", "\"", "\\", "|", " ", "\t", "<", "=", ">", "~", ":", "(", ")" ])+ >
}
          
< DEFAULT >
TOKEN :
{
  < BAR : "|" > : DEFAULT
| < EQ : "=" > : DEFAULT
| < GT : ">" > : DEFAULT
| < LT : "<" > : DEFAULT
| < TILDE : "~" > : DEFAULT
| < DOUBLECOLON : ":" > : FRAGMENT_STRING_STATE
}

< DEFAULT >
TOKEN :
{
  < LPAREN : "(" >
  {
    bracketNestingDepth += 1;
  }
  : DEFAULT
| < RPAREN : ")" >
  {
    bracketNestingDepth -= 1;
  }
  : DEFAULT
}

/**
 * Match a value
 */
String literal() :
{
    Token t; 
}
{
  t = < LITERAL >
  {
    return t.image;
  }
}

/**
 * Match a fragment value
 */
String fragmentLiteral() :
{
  Token t;
}
{
  t = < FRAGMENT_LITERAL >
  {
    return t.image;
  }
}

/**
 * Match char inside quoted string.
 */
void getQuotedStringChar(StringBuilder builder) :
{
  Token t;
  String s;
}
{
  (
    (t = < QUOTED_STRING_CHAR >)
    {
      if (t.image.length() < 2)
      {
        // CHAR
        builder.append(t.image.charAt(0));
      }
    }
  | 
    s = quotedLiteral()
    {
      builder.append(s);
    }
  )
}

/**
 * Match a quoted string.
 */
String quotedLiteral() :
{
  StringBuilder builder = new StringBuilder();
}
{
  (
  < QUOTE >
  )
  (
    getQuotedStringChar(builder)
  )*
  < ENDQUOTE >
  {
    return builder.toString();
  }
}

Token hasNot() :
{
  Token n = null;
}
{
  (
    n = < MINUS > 
    (< WS >)*
  )?
  {
    return n;
  }
}

/**
 * This is fairly convoluted to avoid left recursion 
 */
Condition combination() :
{
  Condition r1;
  Condition r2;
  Condition r3;
  Condition result = null;
  Token not1 = null;
  Token not2 = null;
  Token not3 = null;
  Token not4 = null;
  Token t = null;
  Token t2 = null;
  boolean andOp = false;
}
{
  (< WS >)*
  (
    // [-] CHILD | PARENT  combination
    (
      not1 = hasNot()
      (
        t = < CHILD >
      | t = < PARENT >
      )
      (< WS >)+
    )?
    not2 = hasNot()
    (
      // match
      LOOKAHEAD(match())
      ( 
        (
          r1 = match()
        )
        {
          result = not(not2, r1);
        }
      )
    | 
      // ( combination )
      LOOKAHEAD( < LPAREN > combination() (< WS >)* < RPAREN >)
      (
        ( 
          < LPAREN > 
          r1 = combination() 
          (< WS >)* 
          < RPAREN >
        )
        {
          result = not(not2, new Brackets(r1));
        }
      )
    )
  )
  {
    if (t != null)
    {
      result = not(not1, t.kind == CHILD ? new Child(result) : new Parent(result));
    }
  }
  (
    // result OR | AND [[-]CHILD | PARENT] [-] match | ( combination )
    (
      (
        (
          (< WS >)+ 
          < OR > 
          (< WS >)+
        )
      |
        (
          (< WS >)* 
          < BAR > 
          (< WS >)*
        )
      |
        (
          (< WS >)+
          (
            < AND > 
            (< WS >)+
          )?
        )
        {
          andOp = true;
        }
      )
      (
        not3 = hasNot()
        ( 
          t2 = < CHILD >
        | t2 = < PARENT >
        ) 
        (< WS >)+
      )?
      not4 = hasNot()
      (
        r2 = match()
      | 
        (
          (
            < LPAREN > 
            r2 = combination() 
            (< WS >)* 
            < RPAREN >
          )
          {
            r2 = new Brackets(r2);
          }
        )
      )
      {
        r2 = not(not4, r2);
        if (t2 != null)
        {
          r2 = not(not3, t2.kind == CHILD ? new Child(r2) : new Parent(r2));
        }
        if (andOp)
        {
          if (result instanceof Or) {
            result = new Or(((Or) result).c1, new And(((Or) result).c2, r2));         
          } else { 
            result = new And(result, r2);
          }
        }
        else
        {
          result = new Or(result, r2);
        }
        // as we loop here we need to reset these
        t2 = null;
        r2 = null;
        not3 = null;
        not4 = null;
        andOp = false;
      }
    )
  )*
  (< WS >)*
  {
    return result;
  }
}

Token functionWithArgument() :
{
  Token f = null;
}
{
  (
    f = < TYPE >
  | f = < PRESET >
  | f = < NODES >
  | f = < WAYS >
  | f = < TAGS >
  | f = < MEMBERS >
  | f = < ROLE >
  | f = < AREASIZE >
  | f = < WAYLENGTH >
  | f = < USER >
  | f = < ID >
  | f = < VERSION >
  | f = < CHANGESET >
  | f = < TIMESTAMP >
  | f = < HASROLE >
  | f = < NTH >
  | f = < NTHPERCENT >
  )
  {
    return f;
  }
}

Token functionWithoutArgument() :
{
  Token f = null;
}
{
  (
    f = < CLOSED >
  | f = < UNTAGGED >
  | f = < MODIFIED > 
  | f = < NEW > 
  | f = < DELETED >
  | f = < SELECTED >
  | f = < INCOMPLETE >
  | f = < INVIEW >
  | f = < ALLINVIEW >
  | f = < INDOWNLOADEDAREA >
  | f = < ALLINDOWNLOADEDAREA >
  )
  {
    return f;
  }
}

Condition match() :
{
  String s1 = null;
  boolean s1Quoted = false;
  String s2 = null;
  boolean s2Quoted = false;
  Token op = null;
  Token f1 = null;
  Token f2 = null;
  Token v = null;
}
{
  (
    (
      LOOKAHEAD(quotedLiteral())
      (
        s1 = quotedLiteral()
      )
      {
        s1Quoted = true;
      }
    |
      LOOKAHEAD(literal()) (
        s1 = literal()
      )
    |
      LOOKAHEAD(2, functionWithoutArgument(), { getToken(2).kind != LITERAL })
      (
        f1 = functionWithoutArgument()
      )
    |
      LOOKAHEAD(functionWithArgument() (fragmentLiteral() | quotedLiteral() | < NODE > | < WAY > | < RELATION >))
      (     
        f1 = functionWithArgument()
        (           s1 = fragmentLiteral()
        | s1 = quotedLiteral()
        | v = < NODE >
        | v = < WAY >
        | v = < RELATION >
        )
      )
    )
    
    (
      (
        (
          (< WS >)*
          (
            op = < EQ >
          | op = < GT >
          | op = < LT >
          | op = < TILDE >
          )
          (< WS >)*
        )
        (
          (
            s2 = quotedLiteral()
          )
          {
            s2Quoted = true;
          }
        |
          f2 = functionWithoutArgument()
        |  
          s2 = literal()
        )?
      )
    |
      (
        op = < DOUBLECOLON >
        (
          (
            s2 = quotedLiteral()
          )
          {
            s2Quoted = true;
          }
        | 
          s2 = fragmentLiteral()
        )
      )
    )?
  )
  {
    if (op == null || DOUBLECOLON == op.kind)
    {
      if (f1 != null && (s1 != null || v != null))
      {
        switch (f1.kind)
        {
          case TYPE : return new ElementType(Type.valueOf(v.image.toUpperCase()));
          case PRESET : return new Preset(s1);
          case NODES : return new Nodes(s1);
          case WAYS : return new Ways(s1);
          case TAGS : return new Tags(s1);
          case MEMBERS : return new Members(s1);
          case ROLE : return new Role(s1);
          case AREASIZE : return new AreaSize(s1);
          case WAYLENGTH : return new WayLength(s1);
          case USER : return new User(s1);
          case ID : return new Id(Long.parseLong(s1));
          case VERSION : return new Version(Long.parseLong(s1));
          case CHANGESET : return new Changeset(Long.parseLong(s1));
          case TIMESTAMP : return new ElementTimestamp(s1);
          case HASROLE : return new HasRole(s1);
          case NTH : unsupported(f1.image);
          case NTHPERCENT : unsupported(f1.image);
          default : unsupported(f1.image);
        }
      }
      else if (op != null && DOUBLECOLON == op.kind && s2 != null)
      {
        return new ValueFragment(s1, s2);
      }
      else if (f1 != null)
      {
        switch (f1.kind) { 
          case CLOSED : return new Closed();
          case UNTAGGED : return new Untagged();
          case MODIFIED : 
          case NEW : 
          case DELETED : return new ElementState(ElementState.State.valueOf(f1.image.toUpperCase()));
          case SELECTED : return new Selected();
          case INCOMPLETE : return new Incomplete();
          case INVIEW : return new Inview();
          case ALLINVIEW : return new AllInview();
          case INDOWNLOADEDAREA : return new InDownloadedArea();
          case ALLINDOWNLOADEDAREA : return new AllInDownloadedArea();
          default : unsupported(f1.image);
        }  
      }
      else
      {
        return new Match(s1, null, null, regexp);
      }
    }
    else
    {
      if (s1Quoted || op != null)
      {
        return new Match(s1, op == null ? null : op.image, s2, regexp);
      }
      else if (f2 != null)
      {
        switch (f2.kind)
        {
          case CLOSED : return new Closed();
          case UNTAGGED : return new Untagged();
          case MODIFIED : 
          case NEW : 
          case DELETED : return new ElementState(ElementState.State.valueOf(f2.image.toUpperCase()));
          case SELECTED : return new Selected();
          case INCOMPLETE : return new Incomplete();
          case INVIEW : return new Inview();
          case ALLINVIEW : return new AllInview();
          case INDOWNLOADEDAREA : return new InDownloadedArea();
          case ALLINDOWNLOADEDAREA : return new AllInDownloadedArea();
          default : unsupported(f2.image);
        }
      }
      else {
        return new Match(s1, null, null, regexp);
      }
    }
  }
}

Condition condition0(boolean regexp) :
{
  Condition r;

  this.regexp = regexp;
}
{
  (
    r = combination()
  )
  < EOF >
  {
    return r;
  }
}

<* >
TOKEN :
{
  < UNEXPECTED_CHAR : ~[ ] >
}
