/*
 */

plugins {
    id "ca.coglinc.javacc" version "2.4.0"
    id "org.sonarqube" version "3.0"
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: "jacoco"
apply plugin: 'maven-publish'
apply plugin: 'signing'


version = '0.5.3'
sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    javaccOutput = file(project.buildDir.absolutePath + '/generated/javacc/ch/poole/osm/josmfilterparser')
    mainSource = file('src/main/java/ch/poole/osm/josmfilterparser')
    testSource = file('src/test/java/ch/poole/osm/josmfilterparser')
}

compileJavacc {
    inputDirectory = mainSource
    outputDirectory = javaccOutput
}

compileJava {
    source javaccOutput,mainSource
}

compileTestJava {
    source javaccOutput,mainSource,testSource
}

javadoc {
    source mainSource, testSource
    exclude '**/*.jj'
    failOnError = false
}

task sourcesJar(type: Jar) {
    from mainSource, testSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    //	options.encoding = 'UTF-8'
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

sonarqube {
    properties {
        property "sonar.java.source","1.8"
        property "sonar.sourceEncoding","UTF-8"
        property "sonar.java.binaries", "build/classes/java/main/"
        property "sonar.coverage.jacoco.xmlReportPaths","build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
        property "sonar.qualitygate.wait", "true"
    }
}

task replaceVersion {
    doLast {
        ant.replaceregexp(match:'ch\\.poole\\.osm\\:JosmFilterParser\\:([0-9\\.]+)', replace:"ch.poole.osm:JosmFilterParser:${version}", flags:'g', byline:true) {
            fileset(dir: '.', includes: 'README.md')
        }
    }
}
build.dependsOn replaceVersion

// test input may change and require rerunning the tests
test.inputs.files("test-data/filter.txt","test-data/filter.txt-result")

ext {
    repoUrl = 'https://github.com/simonpoole/JosmFilterParser.git'
    spdxId = 'BSD 3-Clause'
}

publishing {
    publications {
        Release(MavenPublication) {
            from components.java
            groupId 'ch.poole.osm'
            artifactId 'JosmFilterParser'
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = artifactId
                description = 'This is a simple parser for the JOSM search/filter language' 
                url = 'https://github.com/simonpoole/JosmFilterParser'
                scm {
                    url = repoUrl
                }
                licenses {
                    license {
                        name = spdxId
                        url = 'https://raw.githubusercontent.com/simonpoole/JosmFilterParser/master/LICENCE.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Simon Poole'
                    }
                }
            }
            repositories {
                maven {
                    name = 'sonatype'
                    credentials {
                        username System.getenv('SONATYPE_USER')
                        password System.getenv('SONATYPE_PASSWORD')
                    }
                    def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                    def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                }
            }
        }
    }
}

signing {
    sign publishing.publications.Release
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
    maven { url 'https://dl.bintray.com/simonpoole/osm' }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compileOnly 'org.jetbrains:annotations:15.0'
    testCompileOnly 'org.jetbrains:annotations:15.0'
    testCompile 'junit:junit:4.12'
}
